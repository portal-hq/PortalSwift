name: Build and Upload iOS ipa to Mukktest

on:
  push:
    branches:
      - ahmed-release-candidate
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: macos-latest

    env:
      P12_PASSWORD: ${{secrets.P12_PASSWORD}}
      MUUKTEST_API_URL: ${{secrets.MUUKTEST_API_URL}}
      MUUKTEST_API_KEY: ${{secrets.MUUKTEST_API_KEY}}
      EXPORT_OPTIONS_PLIST: ${{secrets.EXPORT_OPTIONS_PLIST}}
      BUILD_CERTIFICATE_BASE64: ${{secrets.BUILD_CERTIFICATE_BASE64}}
      BUILD_PROVISION_PROFILE_BASE64: ${{secrets.DEV_PROVISION_PROFILE_BASE64}}
      EXPORT_PATH: ${{ github.workspace }}
      IPA_NAME: "SPM Example.ipa"
      SCHEME_NAME: "SPM Example"
      KEYCHAIN_PASSWORD: ${{secrets.KEYCHAIN_PASSWORD}}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Fastlane
      run: gem install fastlane

    - name: Create Secrets.xcconfig file
      run: |
        mkdir -p "${{ github.workspace }}/SPM Example"
        touch "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
        cat <<EOF > "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
        ENV=prod
        ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}
        REVERSE_URL=${{ secrets.REVERSE_URL }}
        GDRIVE_CLIENT_ID=${{ secrets.REVERSE_URL }}
        EOF
        chmod 644 "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
        ls -l "${{ github.workspace }}/SPM Example/Secrets.xcconfig"

    - name: Install the Apple certificate and provisioning profile
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Debug Workspace and Scheme
      run: |
        echo "Workspace content:"
        ls "${{ github.workspace }}/PortalSwift.xcworkspace"
        echo "Schemes:"
        xcodebuild -list -workspace "PortalSwift.xcworkspace"

    - name: Build Archive
      run: |
        xcodebuild -scheme "${{ env.SCHEME_NAME }}" \
          -archivePath $RUNNER_TEMP/PortalSwift.xcarchive \
          -sdk iphoneos \
          -configuration Automation \
          -destination generic/platform=iOS \
          -allowProvisioningUpdates \
          clean archive

    - name: Export IPA
      env:
        EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      run: |
        EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
        echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
        xcodebuild -verbose -exportArchive \
          -archivePath $RUNNER_TEMP/PortalSwift.xcarchive \
          -exportOptionsPlist $EXPORT_OPTS_PATH \
          -exportPath "${{ env.EXPORT_PATH }}" \
          -allowProvisioningUpdates

    - name: Check if IPA is generated
      run: |
        if [ -f "${{ env.EXPORT_PATH }}/${{ env.IPA_NAME }}" ]; then
          echo "IPA file generated successfully."
        else
          echo "IPA file not generated."
          exit 1
        fi

    - name: Delete Secrets.xcconfig
      run: rm "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
