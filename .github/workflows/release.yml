name: Publish the sdk version
on:
  push:
    branches:
      - main
      - testing-publish

jobs:
  tag_pod_version:
    runs-on: ubuntu-latest
    env:
      OVERRIDE_PATCH_BUMP: false
      NEW_VERSION: ""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: main

      - name: Get current version from podspec
        run: |
          cd ${{ github.workspace }}/main

          # Set your podspec file name
          PODSPEC_FILE="PortalSwift.podspec"

          # Get current version from podspec file
          CURRENT_VERSION=$(grep -E "s.version\s*=\s*'.*'" $PODSPEC_FILE | sed -E "s/^ *s.version *= *'(.*)'/\1/")

          # Get latest git tag version
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)

          # Compare the versions and create a new tag if necessary
          if [ "$CURRENT_VERSION" != "$LATEST_TAG" ]; then
            echo "OVERRIDE_PATCH_BUMP=true" >> $GITHUB_ENV
            echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          else
            echo "The podspec version ($CURRENT_VERSION) is equal to the latest tag version ($LATEST_TAG). Going to auto bump patch version."
          fi

      - name: Auto bump patch version in podspec
        if: ${{ env.OVERRIDE_PATCH_BUMP  == 'false' }}
        run: |
          cd ${{ github.workspace }}/main
          export PODSPEC_FILE="PortalSwift.podspec"

          # Extract the current version
          CURRENT_VERSION=$(grep -oE "s.version *= *\".*\"" "$PODSPEC_FILE" | sed -E "s/s.version *= *\"(.*)\"/\1/")

          # Remove the pre-release tag and store it separately
          BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d- -f1)
          PRE_RELEASE_TAG=$(echo "$CURRENT_VERSION" | grep -oE "-.*")

          # Split the base version into major, minor, and patch versions
          MAJOR_VERSION=$(echo "$BASE_VERSION" | cut -d. -f1)
          MINOR_VERSION=$(echo "$BASE_VERSION" | cut -d. -f2)
          PATCH_VERSION=$(echo "$BASE_VERSION" | cut -d. -f3)

          # Increment the patch version by 1
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))

          # Construct the new version string with the pre-release tag
          NEW_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEW_PATCH_VERSION$PRE_RELEASE_TAG"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Update the version in the podspec file
          sed -i.bak -E "s/^( *s.version *= *).*/\1\"$NEW_VERSION\"/" "$PODSPEC_FILE"
          rm "$PODSPEC_FILE.bak"

          # Print the first 4 lines of the podspec file
          head -n 4 "$PODSPEC_FILE"

      - name: Push new version to main
        if: ${{ env.OVERRIDE_PATCH_BUMP  == 'false' }}
        run: |
          cd ${{ github.workspace }}/main
          git config --local user.name "portal-release-bot"
          git config --local user.email "release-bot@portalhq.io"

          git commit -A -m "Bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Tag with new version
        run: |
          cd ${{ github.workspace }}/main
          git config --local user.name "portal-release-bot"
          git config --local user.email "release-bot@portalhq.io"

          git tag -a ${{ env.NEW_VERSION }} -m "Version ${{ env.NEW_VERSION }}"
          git push origin ${{ env.NEW_VERSION }}

      - name: Slack - send pod published
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
            "Title": "Swift SDK Published",
            "Body": "The Swift SDK has been published with version: ${{ env.CURRENT_VERSION }}.\n",
            "Status": "Success"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Push new version to release-candidate
        if: ${{ env.OVERRIDE_PATCH_BUMP  == 'false' }}
        run: |
          cd ${{ github.workspace }}/main
          git config --local user.name "portal-release-bot"
          git config --local user.email "release-bot@portalhq.io"
          git checkout testing-tagging

          # Update the version in the podspec file
          sed -i.bak -E "s/^( *s.version *= *).*/\1\"${{ env.NEW_VERSION }}\"/" "$PODSPEC_FILE"
          rm "$PODSPEC_FILE.bak"

          # Print the first 4 lines of the podspec file
          head -n 4 "$PODSPEC_FILE"

          git commit -A -m "Bump version to ${{ env.NEW_VERSION }}"
          git push
