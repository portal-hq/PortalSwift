name: Publish the sdk
on:
  workflow_dispatch:
    inputs:
      version:
        description: "SDK Release Version (only if major or minor bump)"
        type: string
      hot_fix:
        description: "Is this release a hotfix?"
        type: boolean

jobs:
  release_sdk:
    runs-on: macos-latest
    env:
      NEW_VERSION: ${{ inputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: main
          token: ${{ secrets.GH_PAT }}

      - name: Auto bump patch version
        if: ${{ !inputs.version}}
        run: |
          cd ${{ github.workspace }}/main
          export PODSPEC_FILE="PortalSwift.podspec"

          CURRENT_VERSION=$(grep -E 's.version\s*=\s*["'\''].*["'\'']' $PODSPEC_FILE | sed -E 's/^ *s.version *= *["'\''](.*)["'\'']/\1/')

          # Remove the pre-release tag and store it separately
          IFS='-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          BASE_VERSION=${VERSION_PARTS[0]}
          PRE_RELEASE_TAG=${VERSION_PARTS[1]}
          echo "$BASE_VERSION $PRE_RELEASE_TAG"

          # Split the base version into major, minor, and patch versions using IFS
          IFS='.' read -ra BASE_VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR_VERSION=${BASE_VERSION_PARTS[0]}
          MINOR_VERSION=${BASE_VERSION_PARTS[1]}
          PATCH_VERSION=${BASE_VERSION_PARTS[2]}
          echo "$MAJOR_VERSION $MINOR_VERSION $PATCH_VERSION"

          # Increment the patch version by 1
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))

          # Construct the new version string with the pre-release tag
          NEW_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEW_PATCH_VERSION${PRE_RELEASE_TAG:+-$PRE_RELEASE_TAG}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "$NEW_VERSION"

      - name: Push new version
        run: |
          cd ${{ github.workspace }}/main
          git config --local user.name "portal-release-bot"
          git config --local user.email "release-bot@portalhq.io"

          # Update the version in the podspec file
          export PODSPEC_FILE="PortalSwift.podspec"

          sed -i.bak -E "s/^( *s.version *= *).*/\1\"${{ env.NEW_VERSION }}\"/" "$PODSPEC_FILE"
          rm "$PODSPEC_FILE.bak"

          # Print the first 4 lines of the podspec file
          head -n 4 "$PODSPEC_FILE"

          # Update the version file
          ./scripts/update_version_file.sh ${{ env.NEW_VERSION }}

          git add -A
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Tag repo with new version
        run: |
          cd ${{ github.workspace }}/main
          git config --local user.name "portal-release-bot"
          git config --local user.email "release-bot@portalhq.io"

          git tag -a ${{ env.NEW_VERSION }} -m "Version ${{ env.NEW_VERSION }}"
          git push origin ${{ env.NEW_VERSION }}

      - name: Slack - send pod published
        if: ${{ inputs.hot_fix == false }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
            "Title": "**Swift SDK ${{ env.NEW_VERSION }} Published**",
            "Body": "The Swift SDK has been published with version: ${{ env.NEW_VERSION }}.\n",
            "Status": "Success"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack - send hotfix pod published
        if: ${{ inputs.hot_fix == true }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
            "Title": "**Swift SDK - Hotfix ${{ env.NEW_VERSION }} Published**",
            "Body": "The Swift SDK has been published with version: ${{ env.NEW_VERSION }}.\n Please merge the hotfix into release-candidate.\n",
            "Status": "Success"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Merge main to release-candidate
        if: ${{ inputs.hot_fix == false }}
        run: |
          cd ${{ github.workspace }}/main
          git config --local user.name "portal-release-bot"
          git config --local user.email "release-bot@portalhq.io"
          git checkout release-candidate

          git merge -X theirs -m "merge main into release-candidate" main
          git push
