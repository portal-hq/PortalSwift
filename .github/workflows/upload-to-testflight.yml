name: Build and Upload iOS SPM Example App to TestFlight

on:
  push:
    branches:
      - ahmed/eng-3818-ios-update-the-spm-example-release-script-to-upload-to

jobs:
  build-and-upload:
    runs-on: macos-latest

    env:
      # Development
      SCHEME_NAME: "SPM Example"
      # Distribution
      DISTRIBUTION_CERTIFICATE_BASE64: ${{secrets.APPSTORE_IOS_DISTRIBUTION_CERTIFICATE_BASE64}}
      DISTRIBUTION_CERTIFICATE_PASSWORD: ${{secrets.APPSTORE_IOS_DISTRIBUTION_CERTIFICATE_BASE64_PASSWORD}}
      APPSTORE_PROVISION_PROFILE_BASE64: ${{secrets.APPSTORE_PROVISION_PROFILE_BASE64}}
      EXPORT_OPTIONS_PLIST: ${{secrets.APPSTORE_EXPORT_OPTIONS_PLIST}}
      EXPORT_PATH: ${{ github.workspace }}
      APPLEID_USERNAME: ${{secrets.APPLEID_USERNAME}}
      APPLEID_PASSWORD: ${{secrets.APPLEID_PASSWORD}}
      TEAM_ID: ${{secrets.TEAM_ID}}
      IPA_NAME: "SPM Example.ipa"
      # Generic
      KEYCHAIN_PASSWORD: ${{secrets.KEYCHAIN_PASSWORD}}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create Secrets.xcconfig file
      run: |
        mkdir -p "${{ github.workspace }}/SPM Example"
        touch "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
        cat <<EOF > "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
        ENV=prod
        ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}
        REVERSE_URL=${{ secrets.REVERSE_URL }}
        GDRIVE_CLIENT_ID=${{ secrets.REVERSE_URL }}
        EOF
        chmod 644 "${{ github.workspace }}/SPM Example/Secrets.xcconfig"
        ls -l "${{ github.workspace }}/SPM Example/Secrets.xcconfig"

    - name: Install the Apple certificate and provisioning profile
      run: |
        # create variables
        DIST_CERTIFICATE_PATH=$RUNNER_TEMP/dist_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate from secrets
        echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DIST_CERTIFICATE_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $DIST_CERTIFICATE_PATH -P "$DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        APPSTORE_PP_PATH=$RUNNER_TEMP/appstore_pp.mobileprovision
        echo -n "$APPSTORE_PROVISION_PROFILE_BASE64" | base64 --decode -o $APPSTORE_PP_PATH
        cp $APPSTORE_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Build Archive
      run: |
        xcodebuild -scheme "${{ env.SCHEME_NAME }}" \
          -archivePath $RUNNER_TEMP/PortalSwift.xcarchive \
          -sdk iphoneos \
          -configuration Automation-TestFlight \
          -destination generic/platform=iOS \
          -allowProvisioningUpdates \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          DEVELOPMENT_TEAM="${{ env.TEAM_ID }}" \
          clean archive

    - name: Export IPA
      env:
        EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      run: |
        EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
        echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
        xcodebuild -verbose -exportArchive \
          -archivePath $RUNNER_TEMP/PortalSwift.xcarchive \
          -exportOptionsPlist $EXPORT_OPTS_PATH \
          -exportPath "${{ env.EXPORT_PATH }}" \
          -allowProvisioningUpdates \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          DEVELOPMENT_TEAM="${{ env.TEAM_ID }}" | xcpretty

    - name: Check if IPA is generated
      run: |
        if [ -f "${{ env.EXPORT_PATH }}/${{ env.IPA_NAME }}" ]; then
          echo "IPA file generated successfully."
        else
          echo "IPA file not generated."
          exit 1
        fi


    - name: Publish the APP to TestFlight
      run: |
        xcrun altool --upload-app -t ios -f "${{ env.EXPORT_PATH }}/${{ env.IPA_NAME }}" -u "${{ env.APPLEID_USERNAME }}" -p "${{ env.APPLEID_PASSWORD }}" --verbose

    - name: Delete Secrets.xcconfig
      run: rm "${{ github.workspace }}/SPM Example/Secrets.xcconfig"

