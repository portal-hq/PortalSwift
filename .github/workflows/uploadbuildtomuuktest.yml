name: Xcode - Build, Analyze, and Upload to Muuktest

on:
  push:
    branches: [ "prakash-ipa-upload-muuktest" ]

jobs:
  build:
    name: Build, analyze, and upload IPA using xcodebuild
    runs-on: macos-latest

    env:
      P12_PASSWORD: ${{secrets.P12_PASSWORD}}
      MUUKTEST_API_URL: ${{secrets.MUUKTEST_API_URL}}
      MUUKTEST_API_KEY: ${{secrets.MUUKTEST_API_KEY}}
      EXPORT_OPTIONS_PLIST: ${{secrets.EXPORT_OPTIONS_PLIST}}
      BUILD_CERTIFICATE_BASE64: ${{secrets.BUILD_CERTIFICATE_BASE64}}
      BUILD_PROVISION_PROFILE_BASE64: ${{secrets.BUILD_PROVISION_PROFILE_BASE64}}
      EXPORT_PATH: ${{ github.workspace }}/build
      IPA_NAME: SPMExample.ipa
      SCHEME_NAME: "SPM\ Example"
    
    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v4

        
      - name: Create secret.xcconfig file
        run: |
          mkdir -p "${{ github.workspace }}/PortalSwift/SPM Example"
          cat <<EOF > "${{ github.workspace }}/PortalSwift/SPM Example/secret.xcconfig"
          ENV=prod
          ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}
          REVERSE_URL=${{ secrets.REVERSE_URL }}
          GDRIVE_CLIENT_ID=${{ secrets.REVERSE_URL }}
          EOF
        
          chmod 644 "${{ github.workspace }}/PortalSwift/SPM Example/secret.xcconfig"
          ls -l "${{ github.workspace }}/PortalSwift/SPM Example/secret.xcconfig"

        shell: bash

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ env.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ env.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ env.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: Build Archive
        run: |
          xcodebuild -scheme "${{ env.SCHEME_NAME }}" \
          -archivePath ${{ env.EXPORT_PATH }}/${{ env.IPA_NAME }}.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          -xcconfig "${{ github.workspace }}/PortalSwift/SPM Example/secret.xcconfig" \
          -allowProvisioningUpdates
          clean archive          

      - name: Log files in Before Export IPA folder
        run: |
          ls -l ${{env.EXPORT_PATH}}/${{env.IPA_FOLDER_NAME}}

      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ env.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath ${{ env.EXPORT_PATH }}/${{ env.IPA_NAME }}.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath ${{ env.EXPORT_PATH }}
          echo "Exported IPA path: ${{ env.EXPORT_PATH }}/${{ env.IPA_NAME }}"

      
      - name: Log files in after Export IPA folder
        run: |
          ls -l ${{env.EXPORT_PATH}}/${{env.IPA_FOLDER_NAME}}
                
      - name: Get upload URL
        id: get_upload_url
        run: |
          response=$(curl --location '${{ env.MUUKTEST_API_URL }}' \
          --header 'x-api-key: ${{ env.MUUKTEST_API_KEY }}' \
          --header 'Content-Type: application/json' \
          --data '{"filename": "${{ env.IPA_NAME }}"}')
          uploadURL=$(echo "$response" | grep -o '"uploadURL": *"[^"]*"' | sed 's/"uploadURL": "//' | sed 's/"$//')
          if [ -z "$uploadURL" ]; then
            echo "Failed to obtain upload URL"
            exit 1
          fi
          echo "uploadURL=$uploadURL" >> $GITHUB_ENV
          echo "::set-output name=uploadURL::$uploadURL"
              
      - name: Log files in after Export IPA folder
        run: |
          ls -l ${{env.EXPORT_PATH}}

      - name: Upload the app
        run: |
          IPA_FILE="${{ env.EXPORT_PATH }}/SPM Example.ipa"
          if [ ! -f "$IPA_FILE" ]; then
            echo "IPA file not found at $IPA_FILE."
            exit 1
          fi
          echo "IPA file found at $IPA_FILE."
          curl --location --request PUT \
          --header 'Content-Type: application/octet-stream' \
          --data-binary @"$IPA_FILE" \
          "${{ steps.get_upload_url.outputs.uploadURL }}"
